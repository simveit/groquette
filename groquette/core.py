# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['models', 'find_message', 'get_message_attribute', 'usage']

# %% ../nbs/00_core.ipynb 3
import inspect, typing, mimetypes, base64, json
from collections import abc
try: from IPython import display
except: display=None

from groq import Groq
from groq.types.completion_usage import CompletionUsage
from groq.types.chat.chat_completion_message_tool_call import ChatCompletionMessageToolCall
from groq.types.chat import ChatCompletion
from groq.types.chat.chat_completion import Choice
from groq.types.chat.chat_completion_message import ChatCompletionMessage

import toolslm
from toolslm.funccall import *

from fastcore import imghdr
from fastcore.meta import delegates
from fastcore.utils import *

# %% ../nbs/00_core.ipynb 5
models = "llama3-70b-8192", "mixtral-8x7b-32768", "llama3-8b-8192", "gemma-7b-it"

# %% ../nbs/00_core.ipynb 17
def find_message(r:abc.Mapping, # The message to look in
              ):
    "Finds the first message"
    return first(c.message for c in r.choices)

# %% ../nbs/00_core.ipynb 20
def get_message_attribute(response, attribute='content'):
    "Return specified attribute of the message in the response."
    msg = find_message(response)
    return getattr(msg, attribute)

# %% ../nbs/00_core.ipynb 24
def usage(inp=0, # Number of input tokens
          out=0  # Number of output tokens
         ):
    "Slightly more concise version of `CompletionUsage`."
    return CompletionUsage(prompt_tokens=inp, completion_tokens=out, total_tokens=inp+out)

# %% ../nbs/00_core.ipynb 27
@patch(as_prop=True)
def total(self:CompletionUsage): return self.total_tokens

# %% ../nbs/00_core.ipynb 29
@patch
def __repr__(self:CompletionUsage): return f'In: {self.prompt_tokens}; Out: {self.completion_tokens}; Total: {self.total}'

# %% ../nbs/00_core.ipynb 32
@patch
def __add__(self:CompletionUsage, b):
    "Add together each of `input_tokens` and `output_tokens`"
    return usage(self.prompt_tokens+b.prompt_tokens, self.completion_tokens+b.completion_tokens)
